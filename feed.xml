<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[WebriQ | CMS for Static Pages and Shops]]></title><description><![CDATA[CMS Static Websites, CMS Static Web Pages, Content Management System Static Websites, Content Management System Static Web Pages, Free CMS Static Pages, Cloud CMS Static Pages]]></description><link>https://www.webriq.com</link><generator>RSS for Node</generator><lastBuildDate>Mon, 21 Nov 2016 02:17:32 GMT</lastBuildDate><atom:link href="https://www.webriq.com/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[New features WebriQ CMS ]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/untitled234.png' class='img-responsive'>

# A new Markdown Editor 

A simple, beautiful, and JavaScript Markdown editor, that can be used by anyone. 
The WYSIWYG-esque editor allows users who may be less experienced with Markdown to use familiar toolbar buttons and shortcuts. In addition, the syntax is rendered while editing to clearly show the expected result. Headings are larger, emphasized words are italicized, links are underlined, etc. 
WYSIWYG editors that produce HTML are often complex and buggy. Markdown solves this problem in many ways, plus Markdown can be rendered natively on more platforms than HTML. However, Markdown is not a syntax that an average user will be familiar with, nor is it visually clear while editing. In other words, for an unfamiliar user, the syntax they write will make little sense until they click the preview button. 
The SimpleMDE implementation on our CMS system has been designed to bridge this gap for non-technical users who are less familiar with or just learning Markdown syntax.
![](http://phpwebfactories.myresponsive.website//uploads/site_phpwebfactories/pages/Untitled.png)
# Features of the new markdown editor

* Autosaving – after two minutes of being idle on your browser, your work will be auto saved as a draft article or post
* Spellchecker – spelling mistakes are highlighted
* Mobile friendly – a bit difficult to write on a smartphone, but writing and updating your posts through a tablet is surely do-able
* Multiple preview modes – markdown only, preview only and split markdown/preview 
* markdown guide 

# Other CMS enhancements

* Draft articles or posts – all drafts wether it is a new post or a change in an existing post can be saved at all time. The drafts are in a separate Github branch for later publishing. 
* Discard draft – feature to go back to your original published post, discarding all changes made to the post
* Unpublished – you can un publish existing post. Unpublished posts will be kept in a separate branch for later publishing if required
* Published – new or existing posts can be published immediately and are put in to the Master branch of your Github account. 
* Further automation is expected to be on the platform in the latter part of this year, with notably calendar functionality, social media auto posting and integration with cloud based storage systems such as Dropbox and Google Drive. 

# Integration of Google Analytics

You can now integrate Google analytics in to our WebriQ APP. More details can be found on [Google Analytics - Help](http://http://app.webriq.com/help/page/settings/site-analytics)
]]></description><link>https://www.webriq.com/posts/new-features-webriq-cms-</link><guid isPermaLink="true">https://www.webriq.com/posts/new-features-webriq-cms-</guid><category><![CDATA[posts]]></category><pubDate>Mon, 14 Nov 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/untitled234.png" length="0" type="image/png"/></item><item><title><![CDATA[Is it time to give up on your WordPress site?]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/untitled.png' class='img-responsive'>

Nowadays WordPress has become extremely vulnerable to hacking because it's open source and therefore really well-understood, runs something like 30 percent of all websites, and, given the huge range of third party additions (themes, plugins, etc.), ensuring any given installation is hacker-proof is pretty difficult. "Ah!" you might be muttering, "surely keeping WordPress and your plugins up to date is the answer?" Well, my friend, you might like to think so but it seems this latest wave of hacking WordPress may involve one or more zero day vulnerabilities. The scale and complexity of the WordPress ecosystem makes for what's called a large attack surface.

But given the risks of getting hacked, which range from site defacement, through the theft of sensitive data, to becoming a source of malware to your visitors, you have to ask yourself if you still afford the time and effort to effectively secure your site and, even more importantly, if sensitive data could be exposed, can you afford the risk of remediation and possible litigation? Note that cyber-insurance, which sounds like a good hedge against disaster, may not work unless you can prove that you have exercised “due care,” something that may be tricky given the issues involved.

So, what’s the alternative? The answer could be a “static website” or "flat site"; i.e. a site that isn’t full of of databases and backend code but rather a bunch of static HTML, CSS, and client-side JavaScript that can be locked down and easily checked for unauthorized modifications. 

There are a bunch of tools available to build and manage Static websites, and a good starting reference point is [Static Generators](http://staticgen.com).

At WebriQ we have put together a Modern Technology Stack for developers and content editors that is simplifying the many tasks at hand in building, managing, updating and hosting Static websites. It consist of a Static Web Generator specifically designed for business websites, all the tools to publish the code on Github and all the automation tools to continuously manage and update the website through Github commits. 
Last but not least, it contains an online Content Management System that deploys content changes almost instantaneously to your website.

Check it out on [WebriQ APP](http://app.webriq.com)

]]></description><link>https://www.webriq.com/posts/static-website-generators</link><guid isPermaLink="true">https://www.webriq.com/posts/static-website-generators</guid><category><![CDATA[posts]]></category><pubDate>Wed, 09 Nov 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/untitled.png" length="0" type="image/png"/></item><item><title><![CDATA[E-commerce Design Trends that Will Rule in 2017]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/ecommerce-trends.jpg' class='img-responsive'>

Is it bad? Not necessarily. The same design concepts being utilized over and over again for the sake of keeping users happy: That’s good intent and sweet results for business owners, even if it means less conceptual diversity for designers and developers.

Now, as far as online store designing goes, here are 5 trends you can expect will be followed by everyone in the year ahead:

### 1. Card Layouts

![Adidas Home page & Sony](  /img/uploads/addidas_sony.jpg)

You can thank Pinterest and every single template that used Masonry for this trend. Showing your products as Cards is something I can actively get behind, given its simplicity (of implementation) and users’ familiarity with the pattern.   

### 2. A Different take on ‘Above the fold’

![Above the fold](  /img/uploads/vimeo_duckfield_burberry.jpg  )

While a lot of us may have realized that the fold is a myth, that doesn’t stop many retailers from cramming all they can on the top half for that first glance. Only, instead of cramming forms up there, we have decided to use ‘above the fold’ area for capturing attention.

With carefully clicked and picked Hero Images, Sliders, Background videos, etc.

The trend is a conversion-friendly trend and it is catching up with e-commerce portals fast.

### 3. Material Design

By the end of 2013, we were at crossroads between flat and skeuomorphic design. We found the perfect solution in the form of Material design, and it is not going anywhere anytime soon. Everyone, including e-commerce stores, will be using the cleanliness and performance of flat with subtle enhancements of realistic design with abandon.

Here are some stores who are doing it right:

![ Storyville Coffee company & Blackberry](  /img/uploads/storyville-coffee-company_blackberry.jpg  )

<center>![Pottermore](  /img/uploads/pottermore.png  )</center>

#####  <center>**“Not an online store, but the perfect example anyway”**</center>

### 4. Multi-channel done right 

As the businesses change, so will the marketing trends and practices. 2017 is where multi-channel marketing and retail will truly take off as publishers and advertisers strive to create impactful, specifically targeted advertisements using advertiser data collected across multiple devices. This will help reduce advertising clutter on all devices.

This is to attract the tech-savvy millennials using a whole range of devices to shop. 

Marketers were doing it through ads (targeted with geo-location) so far, but Facebook began giving out [‘Place Tips’ to businesses](https://www.facebook.com/business/news/place-tips-for-businesses) to digitize real-life experiences (or vice versa? I am not a retailer).

Basically: Even if Internet of Things hasn’t started to worry you yet, you should still prepare yourself to create more inclusive experiences as marketer and get ready to implement them as web developer and designer.

### 5. Pop-Up Marketing

![Popup Reebok Crossfit]( /img/uploads/popup-reebok-crossfit.jpg  )

##### <center>"Reebok does popups nicely."</center>
 
![Popup Reebok Crossfit]( /img/uploads/popup-cyberchimps-is-confusing.jpg  )

##### <center>"Visual confusion, bad popup, but good trigger (activates once you've read the content)."</center>

God this one is catching on _really_fast, to everyone’s general annoyance. Every single online store I’ve visited lately showed me a pop-up before I even got a look at the products. No, sellers, I will not subscribe or register my email address with you (Well, not now that I know how desperate you are anyway).

Pop-up/interruption marketing to increase social shares or generate leads is gaining traction. But I have to say, if you must do it, do it nicely. Make it trigger delayed (page leave, cursor movement, time delayed, etc.), make the transition smooth (not abrupt as if you’re saying ‘Boo!’). 

Try not to go for more than ONE popup per page; you can decide when to show it.

### Bonus Takeaway

This is for the content people: Stock photos are dying out. Get ready to get creative with photography (Knolling, blur shots, anything else really), but make sure it’s your own so you get to get extra points for being a unique snowflake.

### The Upshot

I’m not a fortune-teller, but my belief that these ‘trends’ will persist in the coming year is backed by the current opinions in web designer community. 

You’re free to treat these as hogwash. Or share your own opinions for added enlightenment in the comments section below.

### _Bonne 2017!_

<hr>
**Author Bio:** Lucy Barret, a talented blogger and WordPress developer, currently employed at HireWPGeeks Ltd. She is an expert of
[converting HTML to WordPress](http://www.hirewpgeeks.com/services/html-to-wordpress/) theme and has a team of skilled developers to assist her. Follow her company on [Facebook](https://www.facebook.com/hirewpgeeks).]]></description><link>https://www.webriq.com/posts/e-commerce-design-trends-that-will-rule-in-2017</link><guid isPermaLink="true">https://www.webriq.com/posts/e-commerce-design-trends-that-will-rule-in-2017</guid><category><![CDATA[]]></category><pubDate>Mon, 10 Oct 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/ecommerce-trends.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Web Design and development Trends for 2017]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/untitled11.jpg' class='img-responsive'>

##     **Adopt a mobile-first approach**

 
With mobile-phones now officially named as the primary devices used for browsing the web, more companies are realising the importance of having a site that effectively delivers content on a smaller screen. Content is designed to fit on mobile and smaller screened devices first, then you work up towards the larger-screened devices.

##  **Wider implementation of Responsive Design**

 
Very much in the same way as mobile first, the number of businesses that will implement a responsive design will still grow substantially. It keeps customers happy with an all-important user experience and it keeps Google search happy for the keyword rankings.

##  **Focus on originality**

 
Customers and users today seek authenticity from the brands they use, and stock pictures of creatives sat around a screen, or business men smiling just won’t cut it anymore. In order for a brand to really strike a connection with it’s audience, they’ll need carefully considered and completely bespoke visuals which are more representative of who they really are.

Bespoke illustrations, big and beautiful typography, and authentic photography are becoming real design differentiators. 

##  **Animations advance**

 
Story-telling and personality is something more and more brands are working on to capture their user’s attention, and animation is starting to play a bigger role in this.

Animations come in all different shape, sizes and styles, and can all serve different purposes. Animations can range from tiny loading-devices which entertains the user while waiting for content to load, to an interesting hover-state used as a UX device to show a user they’re hovering over a link.

##  **More card and grid UI**

 
Cards, made famous by Pinterest are UIs where pieces of content (text,imagery, video) are broken down into individual ‘cards’ which the user is able to navigate through. Card UIs allow brands to show larger amounts of content on a screen at once. Cards tie in nicely with Mobile-First design and Responsive design with gesture based swiping.

 ## **Innovative scrolling and parallax**

 
Scrolling, once reserved for getting from top of a page to the bottom, is being used in more creative capacities to deliver content online.

Scrolling is a versatile mechanic which can work great with all varieties ofcontent delivery. It works with video based content, where large full screen videos play and pause as the user scrolls, as well as static content, which can animate, move, or change depending on the users input.

## **Must have for 2017**

 
As a business you may not be ready to implement all the trends mentioned. But what you must have going in to next year is a superfast, SSL secured, reliable and scalable website that is designed for Mobile-First. If not, your customers and Google will leave you behind.

Have a look at what WebriQ has to offer in the [WEB DESIGN and DEVELOPMENT AREA](http://webriq.com/content-management-system)
 ]]></description><link>https://www.webriq.com/posts/web-design-and-development-trends-2017</link><guid isPermaLink="true">https://www.webriq.com/posts/web-design-and-development-trends-2017</guid><category><![CDATA[posts]]></category><pubDate>Fri, 23 Sep 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/untitled11.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Differences between Static and Dynamic Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/1458052308static.jpg' class='img-responsive'>

##  **What is a Static Site Website?**

A Static Site Generator is a compromise between using a hand-coded static site and a full CMS, while retaining the benefits of both. In essence, you generate a static HTML-only website using CMS-likeconcepts such as templates. The content can be extracted from a database but, more typically, Markdown files are used. These files are also the basis of the CMS system, enabling you to update any content on the fly.

The site generation can occur on your development machine or staging server. The resulting HTML files are then deployed to a live webserver. Users will never know the difference.

A related concept is a _“Headless”_or _“Decoupled”_CMS. These use an interface such as WordPress to handle content administration but allow other systems to access the data via a [RESTAPI](https://en.wikipedia.org/wiki/Representational_state_transfer). One of the better implementations based on the Github Rest API, is [WEBRIQ CMS](http://demo.webriq.com/). 

Popular static site generators include [Roots](http://www.roots.cx/) (used for WebriQ CMS) , [Jekyll](http://jekyllrb.com/), [Hugo](http://gohugo.io/) and [Metalsmith](http://www.metalsmith.io/).

## Major BENEFITS of STATIC WEBSITES

###  **1. Flexibility**

CMSs normally constrain your options, because they’re tied to a database with specific fields. If you want to add a Twitter widget to some pages, you’ll normally require a plugin, a short code or some custom functionality.

In a static site, the widget can simply be inserted into a file directly or using a partial/snippet. There are very few limits, because you’re unshackled by the those imposed by a CMS.

###  **2. Better Performance**

Most CMS applications offer built-in or plugin-powered cache systems to ensure pages are generated and reused when possible. This is effective, although the overhead of managing, validating and re-generating cached pages remains.

Static sites are pre-cached pages which never expire. Files can also be minified prior to deployment to guarantee the smallest load. A static site will always perform better than a CMS-powered version using a similar template.

###    **3. Fewer Server-side Dependencies**

A typical WordPress installation requires:

 - a suitable operating system such as Ubuntu or CentOS

 - a web server such as Apache or NGINX

 - PHP with associated extensions and web server configurations

 - MySQLor PostgreSQL

 - WordPress application

 - any necessary plugins

 - the theme/template code.

These dependencies must be installed and managed. WordPress requires less effort than some other applications, but it’s still possible for a single update to any part to cause chaos.

A static site is lightweight, and can be hosted by any web server able to return HTML files. There is nothing else to install, manage or update.

###  **4. Improved reliability**

 A CMS is complex, with many moving parts and points of failure. Run a WordPress site for any length of time and you’ll almost certainly encounter the dreaded _“Failedto establish a database connection”_error. Unforeseen CMS problems can arise from sudden traffic surges, which crash the database or restrict active connections.

Serving a static site is less intensive — the server just has to return flat files. It’s still possible to crash a web server, but it’ll take considerably more concurrent requests.

###  **5. Superior Security**

There are several reasons why someone may want to attack your website. Traffic hijacking, rogue advertising, linking, authenticity spoofing and malware hosting all permit an unauthorized user to make monetaryand/or kudos gains.

A CMS opens a number of attack vectors. The most obvious is the login screen: it’s only as secure as the weakest user password. Be aware that any page running server-side code also offers potential exploits — for example, firing spam emails via your contact form. It may not be obvious that someone has gained access; the worst culprits want to stay hidden.

A static site has little or no server-side functionality. You cannot access it via scripting or database security holes. Someone could still gain access via SSH or FTP, but they would struggle to do much damage other than defacing pages or uploading files. 

###  **6. Client Control Considerations**

You spend weeks building attractive CMS themes for the client to trash their site within minutes of your hand-over. Using a CMS is not necessarily easy, and it offers considerable power to content editors. You can lock down rights such as plugin installation, but it won’t prevent someone changing fonts, adding weird colors, using poor photographyor corrupting the layout.

A static site can use Markdown files. That limits the user’s options; they make fewer mistakes and cannot adversely affect the pages. 

###  **7. Version Control and Testing**

Database data is volatile. A CMS permits users to add, delete or change content on a whim. Wiping the whole site is a few clicks away. You can back up databases but, even if that’s done regularly, you’re still likely to lose some data.

A static site is safe presuming your content is defined in Markdown files and you use a version control system such as [Git](https://git-scm.com/). Old files are retained, and changes can be undone quickly. Testing becomes easier because the site can be generated and previewed anywhere. 
Preview files are on a separate Git repository, as the live files which are on themain branch. 

So all is good in the static site world. 

For developers interested in our Boilerplate or Certification process.

[BOILERPLATE](https://boilerplate.webriq.com/)

[GETCERTIFIED.](http://webriq.com/get-certified)

]]></description><link>https://www.webriq.com/posts/differences-between-static-and-dynamic-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/differences-between-static-and-dynamic-websites</guid><category><![CDATA[]]></category><pubDate>Sun, 18 Sep 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/1458052308static.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[CMS system for managing Static Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/webriq-slide-hd.jpg' class='img-responsive'>

## How to build reliable, secure and scalable websites with the WebriQ platform

WebriQ is a global leader in software platforms used for mobile, social and web marketing initiatives. It is basically a free CMS developed to build static websites. Being a CMS for static site generators, it gives non-technical users an easy way to add/edit/delete content to any website developed with a static site generator. It allows you to create any type of website including news or community portal, multilingual E-commerce and complex multisite.

WebriQ comes with a parser tool and state-of-the-art CSS Template, capable of incorporating any custom design into the CMS platform. The complete platform is developed on an open source software and is now available to use on a monthly subscription plan. 

### How does it work?

WebriQ CMS is a single page app that helps you create a clean and user-friendly User Interface for editing content stored in your GIT repository. 

In order to get started, you need to first setup a YAML config to define the content model of your website and modify the main layout of the CMS to meet your site design needs. When you click on /admin, you will be redirected automatically to the login page where you'll be able to create or edit content as per your needs.

WebriQ CMS is available in two different options – WebriQpages and WebriQshops 

**WebriQ pages** option allows you to create, manage and publish a variety of different pages ideal for setting up blogs, personal portfolios, business sites or more.
<br>
### Features of WebriQ pages options

#### SuperFast and Secure

Unlike other single server based sites, websites created with this CMS option are served through a CDN which drastically reduces the latency, and offers 100% uptime and much faster downloads. Moreover, since all the websites are static and have no scripts that can be injected with malware or no database to connect to, it is pretty secure as compared to other platforms available out there. With WebriQ pages, service attacks denial, outdated scripts, and malware are all things of the past. 

#### Stunning UI/UX Designs

Since the CMS does not require you to setup and create complex database structures for the site, the webmaster can be invested in building beautiful User interface designs that improve user experience on your site. Consequently, it improves user engagement on your website with reduced bounce rate. 

#### Complete Control

WebriQ Pages gives you complete control over all the elements of your site be it the content or code of your site. It allows you to make changes to the content or the code whenever necessary. 

**WebriQshops**, as the name suggests, allows you to create e-commerce stores to sell any type of products you want.
<br>
### Features of WebriQshops:

#### API Enabled

WebriQshops comes with a storefront and Admin API to enable external integrations. You can also make connections with Restful JSON API.

#### Variety of shipping engines and payments

It also comes integrated with a huge range of shipping and payment methods into the standard shopping cart application.

#### Fast and Secure

The shopping cart application uses optimal computer resources and performs extremely fast. Being inline with PCI Compliance and best industry practices, WebriQ Shop is a very secure solution for businesses looking to establish their online presence.

#### 100% Responsive Solution

The admin and storefront elements of this CMS are optimized for tablet and mobile devices along with various other screen sizes available out there.
<br>
<br>
##  How to build reliable, secure and scalable websites with the WebriQ Platform?

For a matter of fact, WebriQ provides a demo site to help you know how the platform works and what features it has. 

### Step 1: Creating an account

<img src="  /img/uploads/creating-an-account.png  ">
<br>
In order to create a site on WebriQ Platform, you first need to create an account with WebriQ. Open the official website i.e. https://www.webriq.com/#page-top and click create a free account. 

Upon clicking the button, you will be redirected to a site creation wizard where you will be asked to select the type of website you want to create i.e. page or shop. When you choose page option, you will be asked to choose a template. For a free account, there are 4 different templates to choose from i.e. WebriQ Business, WebriQ Portfolio, WebriQ Landing Page, WebriQ Starter Page. Click on the desired option and hit Next. 

### Step 2: Completing the Site creation wizard

<img src="/img/uploads/completing-the-site-creation-wizard.png    ">
<br>
Once you have selected the type, you will need to enter the site name for your website. The website lets you create a subdomain under the webriqs.com primary domain. On the next page, enter your details such as email address, and password to complete the process. Check “I agree to the terms and conditions” and hit next. 

Upon reaching confirmation page, you get confirmation of your subdomain and a request to click finish. 

### Step 3: Linking your website with GitHub Account

<img src="/img/uploads/linking-your-website-with-github-account-.png    ">
<br>
On the next page, you will get a link “Go back to dashboard”. Click it and you will be redirected to your website's dashboard with plenty of options to manage your site and account. 

In order to manage your website, you need a verified GitHub account and connect it with WebriQ account. 

### Step 4: Customize and manage your website

<img src="/img/uploads/customize-and-manage-your-website.png">
<br>
Once you have linked your website to your GitHub account, you can now customize your website as per your needs, create/add new services and so much more. The dashboard lets you edit site settings such as adding a favicon, site logo, keywords, footer and main content. There are various other customization options available including image slider, adding testimonials, partners logo, featured work and more. 

<br>
#### **Conclusion:**

WebriQ is a profound and invincible CMS that allows you to create beautiful and feature-rich static websites without having to write a single line of code. Whether you are planning to create a simple blog or fully customized e-commerce store, WebriQ lets you create a variety type of sites within minutes.

<hr>

#### **Author Bio:**

Jason is a WordPress expert, associated with Wordsuccor Ltd. and has a lot of experience in offering best and reliable [wordpress customization services](http://www.wordsuccor.com/services/wordpress-theme-customisation/). He has delivered numerous range of quality products related to this. He has a strong passion for writing useful and insights about WordPress tips and tricks.]]></description><link>https://www.webriq.com/posts/cms-system-for-managing-static-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/cms-system-for-managing-static-websites</guid><category><![CDATA[posts]]></category><pubDate>Thu, 11 Aug 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/webriq-slide-hd.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Get WebriQ Certified]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/get-certified.jpg' class='img-responsive'>

## How To Get Certified

### 1. [Create An Account](http://app.webriq.com/sites/create)

Create your free account and start creating your own static website

![create account](  /img/uploads/register.jpg)

### 2. Use WebriQ Boilerplate

Navigate to **Quicklinks** Developer  Boilerplate or you can go   directly to [**boilerplate.webriq.com**](http://boilerplate.webriq.com/). Use the documentation to start building your site

![boilerplate](/img/uploads/boiler.jpg)

### 3. Create Slack Account On WebriQHQ

Go to [**slackin.webriq.com**](http://slackin.webriq.com/) to create your account and start chatting with other developers or chat with one of WebriQ developers on the **Q&amp;A** channel

![slackin]( /img/uploads/createacctslack.jpg)

### 4. Submit Domain

Once you are done submit your domain(s) to [**getcertified@webriq.com**](mailto:getcertified@webriq.com)

![submitdomain](/img/uploads/submitdomain.jpg)

### 5. Website Review
Upon positive review you will receive a WebriQ Developers certificate and a **70%** discount on our **PRO** service for a period of 1 Year, representing a value of **$245** per year per site.

![slackin](/img/uploads/review.jpg)

### 6. Profile Listed

Your profile will be listed in our APP, so that potential customers on the platform can contact you for jobs that need to be done on websites on the WebriQ platform.










]]></description><link>https://www.webriq.com/posts/get-webriq-certified</link><guid isPermaLink="true">https://www.webriq.com/posts/get-webriq-certified</guid><category><![CDATA[]]></category><pubDate>Wed, 03 Aug 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/get-certified.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[7 Static Site Generators that will help you build the Amazing Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/7-static-site-generators1.jpg' class='img-responsive'>

Do you remember the first website that you created? Most programmers start by building a series of pages with the particular HTML files. Each will call in some assets i.e. images, CSS, and JavaScript. You can launch all these files directly from the system without using a web server.The static sites offer excellent security and functionality as they don't have dynamic content.

Today, websites are becoming smoother, faster and more flexible, as users love fast yet seamless experiences. The best way is to use a light and static website generator that makes web developmentand management incredibly simple. Static website generator has become a significant tool for creating the professional websites.Having a static site generator means you can create websites with advanced frameworks with a high level of efficiency.

### **Here are top 7 static site generators preferred by the most developers:**
<p style="margin:0px !important;height:5px !important"></p>

#### **Jekyll**

Powered by Ruby, it is a user-friendly static website generator. You can import content from WordPress, Drupal, Tumblr, RSS and CSV formats while using Jekyll. With its built-in server, you can evenbuild your personal static server from its template and source code. It acts as a local web server and generates the HTML, CSS & JavaScript files fromMarkdown, templates, Sass, or CoffeeScript files. With the help of templates, layout controls, and a large number of configuration options, it is easy to create the blog post. 

#### **Roots (roots.cx)**

Roots is a static website generator that generates static HTML, CSS, and javascript files. It is a highly-functional framework used for creating small to medium sized front-ends. Comes with simple installation, it can manage a large number of compiled languages. It uses dynamic content to build blogs, collections, etc. WebriQ has implemented a Web APP to build and manage Static Pages based on [Roots and Github repositories](http://app.webriq.com/sites/create).

#### **DocPad**

Created on Node.js and Express.js, it is a static website generator provides your site with amazing layouts, pre-processors, and a powerful plugin system. It is integrated with the easy-to-manage administrator dashboard that makes publishing easier. It is easy to generate documents dynamically at runtime while using DocPad. Supported by the great community and maintained plugins, DocPad is becoming better every single day.

#### **Hugo**

Written in a statically compiled language, Hugo has become the most popular static website generator in just two years. Comes with a high level of flexibility, Hugo helps you organize your web content with any URL structure. It can be deployed on GitHub Pages, Dropbox, Amazon S3, or any host you choose. With Hugo, it is easy to define the metadata, declare the content types and use indexes to group the content.

#### **Wintersmith**
Created on top of Node.js, Wintersmith is a multi-platform static website generator. Comes with a Jade plugin, It provides absolutely no limitations on how do you manage your content.It also comes with some handy site templates for developing blogs & web apps.It will develop a basic structure for your website that contains all the assets and the content written in Markdown of JSON files.

#### **Middleman**

It is a command-line tool used for developing static websites. While simplifying HTML development, Middleman supports several templating languages that will enable you to add variables, call methods and use loops. With Middleman, you have access to Rb, Haml, CoffeeScript, verbose Javascript and multiple asset management solutions.With the LiveReload extension, the browser will automatically refresh whenever you edit the files of your website.

#### **Nanoc**

Written in Ruby, Nanoc is a powerful static website generator that is ideal for creating any kind of website, from personal portfolios to large business websites. Nanoc is highly flexible site generator helps you pick your favorite languages and extensions. It is easy to mix and match Haml, Sass, CoffeeScript, ERB, and Less, in order to minify CSS and JavaScript.
<p style="margin:0px !important;height:10px !important"></p>

#### All these static website generators will help you highly functional static websites.

---

**Author Bio:** Ankur Purohit is working with Baymediasoft – a renowned [PHP development company](http://www.baymediasoft.com/services/web-development-company/php-development-company-india.html). With Six years of experience working in the field of development and digital marketing, he has technical as well as marketing skills to deliver valuable web solutions.]]></description><link>https://www.webriq.com/posts/7-static-site-generators-that-will-help-you-build-the-amazing-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/7-static-site-generators-that-will-help-you-build-the-amazing-websites</guid><category><![CDATA[]]></category><pubDate>Sun, 10 Jul 2016 17:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/7-static-site-generators1.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[BOTS are the NEW APPS]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/navigation-exp.jpg' class='img-responsive'>

Messaging bots are the all the rage. So what’s all the fuss about?

Bots are a lot easier to install than mobile apps. To “install” a bot,  you simply search for the bot from within your favorite messaging app and click to start chatting. The bot has immediate access to your identity, too. For a mobile app, you open your app store, search for the app, click install, wait a minute to install, open the app, and login/create an account. You’re looking at a few minutes rather than a few seconds. The bot install results in at least a 10X reduction in friction.

Bots are easily distributed. Let’s say your friends are all using some awesome bot, they can easily share the bot with you from the messaging app itself. Bots can be [linked to](https://www.messenger.com/t/webriqhq), shared on socialmedia, and even recommended by other bots. In the case of [Slack](https://locl.co/meya/slack), another team member can add your bot so that your whole team can use it.

Quality mobile apps are expensive to build, maintain and deploy. In the app paradigm, you need to have skilled Android and iOS client development teams ideally paired with a strong UXer or two. Then the app needs to be tested, refined and submitted to app stores for approvals. Rinse and repeat. In the bot world, you leverage the fact that messaging apps are built by someone else. New feature deployment can be done with continuous integration to the backend alone.

There is a very long-tail of use-cases that don’t justify a mobile app. Because of the low-friction install, distribution and development of a bot, a whole slew of use-cases open up. Users won’t likely install an app for their dentist or hairdresser. Therefore, to build dedicated apps for these use-cases would be futile. Instead, would that same user add their dentist and hairdresser to their contact list?

Messaging apps are ubiquitous and dominate consumer’s mobile engagement. Between Facebook Messenger, iMessage, WhatsApp, Kik, Line, Viber, Telegram, Slack and Hangouts messaging has almost complete market penetration. On top of this, messaging has [5.6Xhigher 12-month retention](http://www.statista.com/statistics/417780/mobile-messenger-app-retention/) than other mobile apps.

Consumers are experiencing mobile [app fatigue](http://techcrunch.com/2016/02/03/app-fatigue/). What’s the last app that made it onto your home screen? How many apps did you install this month? 

Bot interactions are intrinsically bi-directional. In the web and mobile app paradigm you need to provide contact info and/or rely on push notifications for the “receive” component of the UX. These notifications have to be stitched together by links and intents into the corresponding UI view. In messaging, incoming messages are a first-class citizen. This lends itself nicely to commerce and financial transactions which are, by definition, bi-directional.

Moving complexity to the cloud reduces a user’s cognitive load. Sure, you can always search Google, comb through results, click a few links, extract out the necessary information, and formulate a decision. However, isn’t it easier if a bot did that for you? Thisis especially useful when on the go or when time is limited.

Bots are extremely portable. While messaging apps are a bot’s native environment, they can just as easily exist in live chat, personal assistants , car audio systems, [as a voice in your ear](https://en.wikipedia.org/wiki/Her_%28film%29), smart watches, email, and push notifications.

Bot software development cycles are extremely fast. The first time the request can be serviced manually, then an automated version can be deployed behind the scenes. You get the added benefit of not wasting time building the wrong thing.

Humans are innately hardwired for language and conversation. Because of this language has evolved to become powerful, nuanced, and flexible. It goes without saying, but language has been used extensively for all of recorded history to do amazing things. Bots leverage this underlying human trait.

##  **Bots go beyond devices**

Today’s apps may be inextricable from their mobile hosts, but apps remain a far more flexible technology than their predecessors. Apps let us keep our favorite software products in our pockets and use them wherever we go, whenever, so long as we have a web hook-up. Bots are the new apps because they go beyond devices and provide a new version of mobility. Not only are we able to use bot technology anywhere in the world , but we can use the bot across multiple devices and interact with it in a variety of ways. Microsoft’s Satya Nadella calls this “[conversation as a platform](http://www.businessinsider.com/microsoft-ceo-satya-nadella-on-conversations-as-a-platform-and-chatbots-2016-3).” Rather than tapping, swiping, and searching, we will be able to just talk to bots to get exactly what we need. It’s the convenience of apps taken to the next level.

## **Bots are friendly**

Facebook understands the No. 1rule of marketing - forging an emotional connection is the secret to customer loyalty. When I see a happy memory from the past, the memory makes me feel good and I transfer those feelings to Facebook.

Bots go further by making the emotional connection a seemingly two-way experience. Users may feel like their bots are their buddies, virtual friends they can joke with, who could grow to know their true selves. And bots are programmed to make users believe this is possible. [Mezi](http://mezi.com/), an AI-powered shopping bot, is programmed to feel like the user’s best friend who also happens to be an expert shopper. It’s easy to see how shopping with a code-based best friend could inspire even more feelings of good-will than the occasional Facebook memory.

## **Bots are multi-purpose**

Apple killed the iPod because people prefered to listen to music on their iPhones. Smartwatch sales fell flat because they didn’t offer a radically new functionality. Tablets are on the decline. These stories speak to a trend in consumer technology: downsizing. Apps are the last vestige of the single-purpose product era. Bots will integrate all of these apps in one place, where the user won’t have to think to switch between solutions. Bots will make using technology as fluid as moving through life.

## **Our BOT implementations**

At WebriQ we have been involved in a number of BOT implementations, through native Facebook API implementations and through dedicated platforms to build and manage BOTS on Facebook Messenger, Telegram and Slack. 
A couple of examples are [WebriQ](https://www.messenger.com/t/webriqHQ), [Lawdingo](https://www.messenger.com/t/thelawdingo) and [Buzzin Brisbane](https://messaging.buzzin.today/#/login?p=@Buzzinbrisbane_bot) 

Learn more on [BOTS](https://webfactories.biz/bots-are-the-new-apps)

]]></description><link>https://www.webriq.com/posts/bots-are-the-new-apps</link><guid isPermaLink="true">https://www.webriq.com/posts/bots-are-the-new-apps</guid><category><![CDATA[posts]]></category><pubDate>Sun, 10 Jul 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/navigation-exp.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[What is a Static Website]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/what-is-a-static-website.jpg' class='img-responsive'>

## **A Little Background**

There’s been a lot of talk recently about [STATIC SITES](http://app.webriq.com/sites/create) and the new generation of tools used to create them,commonly referred to as “**static site generators**” or “**static site engines**.” As with any new technology, it can sometimes be hard to differentiate the hype from the reality. In a series of blog post aims to give you a broad understanding of the technology: what it is and whereit best applies. First, however,we need to define what static sites are and where they came from.

The term “static site” is an interesting one if you think about it, as it defines itself by what it lacks. The “static” aspect doesn’t so much describe a feature as the absence of one: dynamic page rendering. Once upon a time, probably before we commonly used the term “static site,” this would have been considered a weakness.

Those of us who’ve been working in web development for some time probably recall building static sites using tools like Dreamweaver, HomeSite, or(heaven forbid) FrontPage. The content on these pages could only be changed by manually altering the existing site files and replacing the files onthe server via FTP.

There were a number of issues with this process. Adding content to the site required a moderately high level of technical knowledge, either knowledge of the specific tool used to design and build the site or of HTML to hand code the site. One also needed to understand how to deploy the site to a host via FTP, which isn’t necessarily straightforward for non technical users. This meant that the content creators, who are frequently non technical, could not directly or easily contribute to the site and required the assistance of a webdeveloper to add new content.

Creating new pages typically required copying and tweaking existing pages. As the site grew, maintaining proper navigation and links typically became both tedious and extremely error prone. Some tools offered features like templates that tried to solve these issues, but these could be complicated or cumbersome to create.

In addition to these issues, there was the limitation that if your site required dynamic features like comments or forums, for example, this was simply not possible in a pure static site.

## The Dynamic Site Era

Dynamic sites seemed to fix these issues. Non technical content creators could create and update pages via backend forms without the need to understand the specifics of website development tools or HTML. Since the content and pages were all driven from a database, navigation could be generated automatically. In addition, by definition, dynamic sites allow for dynamic features such as forums or comments.

In the case of content-focused web pages, dynamic sites often took the form of a content management system (CMS). These could be custom built to the needs of the site or, very frequently, selected from a number of commercial or open source options.

To this day, most of the content published on the Web runs through some form of content management system. Popular open source options include [Drupal,](http://drupal.com/) [Joomla,](http://www.joomla.org/)and [Typo3](http://typo3.org/) or [WebriQ CMS](http://www.webtools2go.com/). Nowadays, these systems typically handle much more than simply content creation and publication, with features such as complex roles and access control, workflow management, document management, and syndication.

These additional features lead to the biggest issue with dynamic sites, which is that the solution is often more complex than the problem. By virtue of its need to cater to a broad set of customers, a pre-built CMS often has a steep learning curve for both developers and content creators. Meanwhile, a custom CMS requires both extensive development efforts and access to a developer should issues or necessary changes arise.

Hosting dynamic sites is complicated by the need for database storage (and backups) as well as support for whatever dynamic language the site is built upon (PHP,Ruby, etc.). Factor in the need for regular updates to the dynamic language, database solution and even the CMS software itself, and it becomes rather obvious that, while dynamic sites solve many difficult problems, they bring with them their own set of complications.

## The Rise of Blog Engines

The complexity of content management systems was not well suited for smaller, content-focused sites or blogs that didn’t require advanced features like complex user roles or workflow. Blogging engines, the most popular being [Wordpress](https://wordpress.org), aimed to solve this by making development simple, with pre-built and easily customizable templates, and publishing content quick and easy.

Blog engines don’t negate the need for supporting a dynamic language(PHPin the case of WordPress) or for a database(typically MySQL for WordPress). WordPress, however, became popular enough that many hosts made “out-of-the-box” hosting solutions that simplified set up and maintenance. To give you a sense of the popularity of WordPress, [according to W3Techs,](http://w3techs.com/technologies/overview/content_management/all/) as of May 2015, Wordpress is used on approximately 23.9% of the top 10 million sites, a percentage that dwarfs every other content management system.

Nonetheless, overtime, WordPress has begun to gain some of the complexity of a typical CMS, and it is generally lumped in the category of CMS by most industry research. Many sites heavily depend on features that are added via plug-ins, the [quantity and quality of](http://wpengine.com/2013/08/28/plugins-and-fast-wordpress-sites-its-not-the-number-of-plugins-its-the-quality/) which can dramatically impact site performance.(http://wpengine.com/2013/08/28/plugins-and-fast-wordpress-sites-its-not-the-number-of-plugins-its-the-quality/. In addition, features like plug-ins and [“shortcodes”can](https://codex.wordpress.org/Shortcode) impact the portability of content, keeping your site tied to the Wordpress platform.

Some in the blogging community felt that Wordpress and competing blog engines like [MoveableTypehad](https://movabletype.org/) strayed so far from the simplicity of their initial blogging focus that they created new projects, like [Ghost](https://ghost.org/) , that aimed to get back to the basics of just blogging. Ghost’s tagline is, in fact, “Justa blogging platform.”

## Static Pages Get A New Life

Whatever complexity dynamic sites may bring, for most use cases, there is simply no avoiding the need for dynamic data. Even the most basic content site, like a personal blog, generally has dynamic aspects: commenting, feedback or contact forms and search, to name just a few. So it wasn’t until the rise of new services that can fill these voids that static sites really became a viable option of rmore than just [“brochureware”.](http://www.oxforddictionaries.com/us/definition/american_english/brochureware)

There are numerous services, both free and paid, that offer the ability to add dynamic aspects into static pages (it’simportant to note that these services are not specifically intended for use only on static sites). Some popular options include:

 • [Disqus,](https://disqus.com/) [Livefyre,](http://web.livefyre.com/comments/) or [Facebook for](https://developers.facebook.com/docs/plugins/comments) comments

• [Wufooor](http://www.wufoo.com/) or [Google for](http://www.google.com/forms/about/) forms

• [Google,](https://cse.google.com/cse/) [Swiftype,](https://swiftype.com/) or [AddSearch for](http://www.addsearch.com/) search

• [Discourse for](http://www.discourse.org/) forums

There are many more covering a full range of typical site requirements. There even BaaS(backend as a service) solutions like [Parseor](https://parse.com/), [Kinveyth](http://www.kinvey.com/) that offer APIs that allow developers to pull any form of arbitrary dynamic data into a static page.

If you’re interested in some of the services listed above as well as implementations, read an article on the topic called [“Movingto](http://modernweb.com/2013/12/16/moving-to-static-and-keeping-your-toys/)[Staticand Keeping YourToys”.](http://modernweb.com/2013/12/16/moving-to-static-and-keeping-your-toys/)

## Defining a Static Website

So far we’ve covered some background showing how the static web pages of old failed to meet the needs of the Web as websites became more complex and interactive. We discussed how dynamic sites generally and content management systems specifically solved some of these problems but led to increased complexity in both development and authoring. Blog engines partially addressed these issues but also took on some of the complexity over time. Finally, we saw how the rise of services have helped make static pages a viable option again.

### Given all the above, what is a Static Website exactly 

This is probably the key defining characteristic of a static site and part of why static sites tend to perform so well: there is no server-side generation at runtime. This means, for instance, that every visitor to your static site will be served an identical copy of _index.html_ from the server until it is manually overwritten, say by uploading a new file or by committing to a Github repository. 

 _There is no server-side language._

It follows from the preceding characteristic that there would be no server-side language (like Ruby or PHP for example) involved.

 _Thereis no database._

As there is no server-side language to speak to a database, there is therefore no database. This does not mean that there is no data. There can be data stored as files or via an external service like the ones discussed earlier. This means that if you need common features like user registration/login, this would need to be via an external service.

 _Static sites are HTML,_ _CSS, and JavaScript._

This seems fairly obvious, but it should be clear that since static sites are intended to run in the browser, they must rely on web technologies to function. Of course, this can also include images like JPEG and GIF, graphic files like SVG and WebGL, or data formats like JSON or XML.

## Benefits of Static Sites

While each of the preceding features brings with it certain limitations, they also lead to some of the primary benefits of static sites:

 _Performance_

There is no server-side processing and no database to connect to, meaning that there is nothing to slow down getting a static page from the server to your end user. This also means that there are no bottlenecks that might cause slowness or outages should you encounter a significant traffic surge.

 _Hosting_

Since no server-side language is required, hosting requires no complicated setup or maintenance, making it cheap and easy. In fact, there are even free options, like [GitHub pages or](https://pages.github.com/) [Surge,](https://surge.sh/) for instance. Hosting and deployment will be covered in follow onposts. 

 _Security_

There are no server-side language issues to exploit and no database to hack. Basically, as long as the files on your host are secure, your static site is secure.

_Content versioning_

Since your entire site, from configuration to content, is file-based, it is very easy to keep all aspects of it within a version control system like Git. This can be especially advantageous for things like documentation that you may want to allow community contributions, forexample, using pull requests on GitHub.

**To be continued in later posts.**

Get a sneak preview on [WebriQ's Web Content Management System for Static websites](http://app.webriq.com/sites/create) or just go through a [QUICK DEMO](http://app.webriq.com/help/page/demo/howto)

**This post is an extract from the Book by Brian Rinaldi – Static Site **Generators.**** ]]></description><link>https://www.webriq.com/posts/what-is-a-static-website</link><guid isPermaLink="true">https://www.webriq.com/posts/what-is-a-static-website</guid><category><![CDATA[posts]]></category><pubDate>Sun, 26 Jun 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/what-is-a-static-website.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Many reasons why your next website should be Static]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/many-reasons-static.jpg' class='img-responsive'>

## Your website is overkill, and it’s killing your traffic.

There’s no reason to have a massive, unwieldy Content Management System with a database when you could have a fast, secure and beautiful static site. But how can you decide if a static site is right for you?

###  1. YOU VALUE SECURITY

When was the last time you updated your CMS software and plugins? By conservative estimate, [70% of all WordPress installs](https://www.wpwhitesecurity.com/wordpress-security-news-updates/statistics-70-percent-wordpress-installations-vulnerable/) are vulnerable to known security exploits. In 2014, [millions of Drupal sites](https://blog.sucuri.net/2014/10/drupal-warns-every-drupal-7-website-was-compromised-unless-patched.html) were vulnerable due to a bug in the code, and [Drupal told users](https://www.drupal.org/PSA-2014-003) that if they hadn’t updated within 7 hours of the announcement, they should assume that they were hacked. 

With a static site, you don’t have to worry about malicious code being injected into your site when users visit it. Static sites are builton a production machine by static site generators, which take yourcode and spit out flat HTML files with CSS and JavaScript. When a user requests a page from your site, the server just sends them the file for that page, instead of building that page from various assets each time a viewer comes on . No build process means standard hacking attacks like scripting or database security exploits just don’t work.

###  2. YOU VALUE SPEED

What does a browser do? It renders HTML, CSS and JavaScript into a human-viewable format. No matter what type of site you use, a legacy dynamic site or a modern static one, what gets sent from the server to your browser is HTML, CSS and JavaScript. So why take the time and resources to render your site every single time someone visits when you can have a pre-built version ready to go? There’s a reason that a normal static site hosted on a CDN is often 10 times faster time-to-first-byte than a site built with a legacy Content Management System.

Additionally, by hosting your static site on a CDN, you can serve it from whichever node is closest to your users. Someone viewing your site in a coffeeshop in Vienna pulls from a European server, not a server farm in Silicon Valley. The same goes for your Japanese visitors, or a user just down the street.

###  3. FLEXIBILITY

Your basic site built with WordPress or Drupal starts out as a one-size-fits-all solution that is then customized by bolting on plugins. A lot of plugins. Seriously, so many plugins. A quick Googlesearch for “must have WordPress plugins” yields a front page where nine of the ten posts list 20 plugins or more as “must have”.

Witha static site, you can get lean and mean, with a tool that does exactly what you need it to. Make like the pros and use [Middleman](http://www.middlemanapp.com/) or [Roots](http://www.roots.cx/). At WebriQ we love to work with Roots as it build with a corporate client in mind.

###  4. SMALLER FOOTPRINT

Your WordPress install is a monster of cobbled together software and hardware, and probably looks something like this:
a machine running your preferred distro of Linux
a web server running Nginx or Apache
PHP with its associated extensions and web server configurations
MySQL
WordPress or similar exercises like Joomla, Drupal, Concrete5 etc.
All the plugins you need 
Your theme and template code
If you don’t want to host your own, then you just have to hope that your host keeps its PHP and MySQL up to date, so that you aren’t exposed to those pesky security vulnerabilities that crop up everynow and again. Then there is the upkeep. Make sure you’ve allotted time to manage all these dependencies. And some more time in case an updated plugin or theme breaks something.

A static site, when generated, is capable of being hosted on any webserver that can return HTML files. Of course, you’ll want to take advantage of the possibilities afforded to you with a static site by finding a host that allows for things like continuous deployment,instant cache invalidation, automated deploys and more. That job is done for you here at WebriQ without the need of having admin staff on board.

###  5. RELIABILITY

The beauty of serving up flat HTML files is that they can be hosted anywhere and everywhere, like on a CDN. Let’s say there’s a DDoS attack on the server where your legacy site is hosted. Sorry, but you might just be down for a few hours or even days. That same attackhits a node where your static site is hosted? Your site just gets served up from the next node. Your visitors never notice that there’s a problem.

###  6. VERSION CONTROL

It’s completely possible to design a site on your production machine and then upload it to a host , but the majority of developers would like some sort of version control system like Git. You can be roll back toearlier commits, meaning that short of deleting your online repository, you can always go back to a previous version of your site with a few keystrokes. And if you are a WebriQ customer, you can rollback to a previous deploy with just one click.

###  7. DEVELOPER EXPERIENCE

The beauty of using a static website generator is in the developer experience. Build tools will output your HTML to a particular directory on your build machine, and nearly all tools include a local web server, which allows you to check and double check your progress as you go. You have the security of knowing that your site will look exactly the same to your visitors as it does to you as a developer.

###  8. SCALABILITY

You’ve hit it big! Your site has gone viral, and you are seeing absolutely massive response and increased visits thanks to getting name checked across the social media spectrum. Did you anticipate that this might happen? Did you over provision massively, just in case this happened? Are you paying for huge chunks of bandwidth monthly, hoping for an explosion of traffic.

Or are you making frantic calls to your service provider to get back up online after you made it to Reddit’s front page? Your plan couldn’t handle that kind of attention, and now you are down.

And when your traffic means that you have to scale, it means that you are paying for all that complex code to run on your server at every page request. And that’s going to hit you right where it hurts the most.

With static, scalability is barely an issue. Of course it scales! Increased requests mean increased pages served, but no extra work in building those pages. With some providers, scale is built in, whilewith others like Amazon’s S3, all you have to pay for is the increased bandwidth.

###  9. HOSTING &amp; PRICE

I fall the heavy lifting of building a static site is done on your production machine, then what exactly is it that you are paying for with hosting? Asset storage, basically. Your static HTML files take up next to no space, and so your service is usually priced accordingly. Instead, you can spend your money where it really matters, on the features that make your site faster and your life easier, features like atomic deploys and asset fingerprinting to make sure your site is always globally consistent, or git integration andautomated builds, so your site is always up to date with your latest changes, and snapshot versioning and instant rollbacks.

There’s never been a better time to take advantage of the speed, security and reliability of static web generators and the development environment around them. So what are you waiting for?

Signup for a FREE account on [SIGNUP](http://app.webriq.com/sites/create)

 ]]></description><link>https://www.webriq.com/posts/many-reasons-why-your-next-website-should-be-static</link><guid isPermaLink="true">https://www.webriq.com/posts/many-reasons-why-your-next-website-should-be-static</guid><category><![CDATA[posts]]></category><pubDate>Thu, 16 Jun 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/many-reasons-static.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Cloud CMS for Static Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/cloud-cms-for-static-websites.jpg' class='img-responsive'>

Database driven websites have been around for a while, and whereas they have been driving tremendous opportunities for the open-source development community ,they are not any longer the answer to most of the customer requirements out there. Why is that, because most websites plain and simply do not need a database or a web server for that matter, let alone complex development languages. Keep it simply if you can and focus on the main things that are driving traffic to websites, any website – mobile friendly design, speed, speed and speed, security and reliability. Why on earth would your site slow down or crash with 100 or even 1,000 concurrent downloads or be hackable by anyone understanding how plugins or scripts work. No reason.

Other often heard objections are there’s no way for users to interact with my content!

You may think that sites built with static tools aren’t interactive, but it is not really the case. With Application Programming Interfaces (API) you can add just about any functionality you desire to your site.

Social sharing can be done with Shareaholic or ShareThis. If you want to add comments, add Disqus or LiveFyre. Why do the heavy lifting when someone elsehas already done it for you?

There are too many choices and it is too hard.

There are,admittedly, lots of choices when it comes to finding a static website generator. But that is the beauty of it. In fact, those choices are pruned significantly when you take into account exactly what you–the-user–want from a site, and how you want to make it happen.

Well we made some choices to make it easy for you. We opted for Roots ([www.roots.cx](http://www.roots.cx/)) as a Static Website generator, primarily because it was build by a creative agency with corporate customers and professional designs in mind. Any marketing or corporate website will work beautifully with Roots and there are extension available to pull in any data or template you may need for your site. It is all easy to install, well documented with a relative acceptable learning curve for any developer out there. 

And there isdocumentation on our APP as well, making it even easier to build andmanage the entire process – [http://app.webriq.com/help/page](http://app.webriq.com/help/page).

Updating content istoo hard! There is no CMS.

Actually, there are quite a few options for updating content on static sites. The first and most obvious is writing and saving your content as markdown files. The majority of static site generators support markdownout-of-the-box or with the simple installation of a plugin.

If Markdown is aproblem, and it actually is for most non-technical users, there are anumber of different CMS options. Some are hosted, some are content APIs, and some live on your production machine.

Contentful is a Software as a Service (SaaS) that uses a content API to deliver your content. Contentful has integrations for static sitegenerators including Jekyll, Roots, Middleman and Metalsmith. Roots has an extension that will hook you in to Contentful and you will beable to update your content through an easy to use UI. Each time you do that, an automatic build will be generated by our platform. Contenful is ideal for larger corporate projects and where multiple contributors have to work together in a workflow with roles and permissions.

Prose.io - actually lets you navigate and create new content right on GitHub.Once you have your site up and running in a repository, you can create new posts, define URLs, write in Markdown or use their built in editor to write and format your posts. 
Especially usefulfor customers who have no appetite to change anything on theirwebsite without the help of a qualified developer. 

### WebriQ CMS - based on the open source version of Netlify CMS it combines the UI of Contentful and updates the content through the Github API to the repository of the website, completely transparent for content managers or developers. 

A demo can be tested on [http://app.webriq.com/help/page/demo/howto](http://app.webriq.com/help/page/demo/howto).

Our SaaS platform comes standard with a pre-build template, a repository on Github,online CMS tool to manage content, tools to add Google analytics and other scripts, Form submission tools and a rollback to previous versions of your website. 
Premium features include SSL certificate, Invite members to your website for development or content management (role based) and Domain redirects to single or multiple Top Level Domains. 

Why wait, build your websites with the latest and greatest tools available. We need to do better then Wordpress experiences, because we can. 
]]></description><link>https://www.webriq.com/posts/cloud-cms-for-static-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/cloud-cms-for-static-websites</guid><category><![CDATA[posts]]></category><pubDate>Mon, 06 Jun 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/cloud-cms-for-static-websites.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Free CMS for Static Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/free-cms.jpg' class='img-responsive'>

We just dumped our old web content management system of choice , got the hang of a static websites , and really like the simple, lightweight and maintenance-free feel of it…

Why on earth would I want to get a CMS for static websites?

A few reasons, you should consider a CMS for a static website; 
So that non-technical folks are also able to create content for static websites, without the need to go and consult a developer.
So that you can use static websites in lots more customer projects.
So that no developer is required to update the repository and run the site.

It just so happens that static site are mostly loved by developers, but not by the average Joe. They do not offer WYSIWYG,previewing on demo sites may take an update cycle, they are often based on markdown text files, and they require some knowledge of modern day repositories.

Moreover, when teams are collaborating, it can get complicated quickly. Has this article already been proof-read or reviewed? Is this input valid? Are user permissions available, e.g. for administering adding and removing team members? Can this article be published at a future date? How can a large repository of content be categorized,organized, and searched? All these requirements have previously been more or less solved within the admin area of your CMS. But of course with all the baggage that made you leave the appserver-app-database-in-one-big-blob stack in the first place.

## **Content API is one solution**
Decoupling the content management aspect from the web building system. And then replacing the maintenance prone server with a cloud based web service offering. Effectively, instead of your CMS ,you move to a [Content Management as a Service (CMaaS)](https://www.contentful.com/r/knowledgebase/content-as-a-service/) world, with a content API to deliver all your content. That way, you get the all the [benefits of content management features](http://www.digett.com/blog/01/16/2014/pairing-static-websites-cms) while still being able to embrace the static site generator mantra.



Systems like Prismic or Contentful are typically designed to be fast, scalable, secure, offer high uptime, so that you don’t have to worry about maintenance ever again.
Separates content from presentation, so you can reuse your content repository for any device platform your heart desires. That way, you can COPE ("create once, publish everywhere").
Offers webhooks that you can use to rebuild your static site in a fully automated fashion every time your content is modified.

On the not so positive site, the platforms are proprietary (as opposed to open source), do not come cheap, have a lot of complexity that more often not needed then needed and have a relatively high cost of ownership.

## **A better alternative is a [FREE CMS](http://app.webriq.com/auth/register) for your static website**

Deploy modern static websites with our automated open source platform. Add best practices like SSL, CDN distribution,and continuous deployment with a single click.

All elements of the platform are open sourced, so you are in full control of the website. The CMS interfaces with a Github repository through a simple User Interface, only containing the variable elements in the website, i.e. blogs, articles etc.

Each new content entry triggers a new build on the platform and ensures that your content updates are reflected on your site within seconds. All automated, and without the need of a developer and without the possibility to change the code on your website by mistake. 

All the content is safely stored in a Github public or private repository. You can revert to previous or go back later versions of the site by a single click. Last but not least you can assign different content editors to take of the content updates by inviting them as a team member.

A full demo of the FREE CMS system is available at [DEMO](http://app.webriq.com/help/page/demo/howto).
Follow the instructions and let us know if you need any additional help.
Register for an [ACCOUNT](http://app.webriq.com/auth/register).

]]></description><link>https://www.webriq.com/posts/free-cms-for-static-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/free-cms-for-static-websites</guid><category><![CDATA[posts]]></category><pubDate>Sun, 15 May 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/free-cms.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Issues with Static Website generators]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/issues-with-static-website-generators.jpg' class='img-responsive'>

There has been a lot of talk recently on the rebirth of Static websites, for lack of a better word. Static websites have been around for quite a while, but have been gradually replaced by database driven websites and content management systems. The likes of Wordpress, Joomla, Drupal and a ton of others come to mind. Five to six years ago that seemed the way to - you store all your data in a relational database and you serve all the content from a web server. The dot's are connected via a user interface to administer and manage all the content and users from of your web assets. 
Tablets and smartphones were not around in large quantities, browser capabilities were minimal and security and speed were not high on the agenda. Open source projects like Linux, Apache, MySQL and PHP were the drivers of a solid development community around those technologies. 

But the success of database driven websites has created real issues that are hard to overcome. The model was not really scaleable - with a couple of simultaneous users, no worries. With hundreds of users, the server would go down eventually. 
With numerous plugins and patches, the model became highly vulnerable to Service attacks and denial of service.
Webservers and databases need to be maintained and updated, a costly and complex exercise.
The need of ever better and speedier user experience on now smartphones and tablets further stretches the model to where it becomes questionable if a database driven website is really the answer for websites in 2016 and beyond.

## Over the last years we have seen the rise of Static Website generators 
There are plenty of them around, like Jekyll, Roots, Hugo, Middleman just to name a few. They are great tools to use, as the use HTML, CSS and Javascript as main language. So no need for PHP knowledge, database and web server knowledge and no need to use plugins to put your site up. Without the need of a database, web server and a multitude of plugins, the websites build with these frameworks are fast, reliable and scaleable. Add an open source SSL certificate to it, put it on a CDN (Content Delivery Network) and you are done. Cost of building and maintenance is substantially lower then with a database driven website. It scales without additional resources, it is as fast for one visitor as it is for thousands of visitors. 

There’s a rumor going around that dynamic sites are better for SEO. They’ve got plugins! They’ve got updated content! Spiders! If you’ve built a single page app with static technology, most of your site will be a bunch of javascript tags, something that doesn’t do you much good when the web crawlers come looking for content. That’s why there are services that offer prerendering. Pre rendering allows you to show the crawlers the content that users will actually see by rendering it in a browser, saving that static HTML, and then returning it to the crawler as HTML. Now your content will get indexed like a normal page. Check out prerendering services like [Prerender.io](https://prerender.io/), [Brombone](http://www.brombone.com/), [SEO.js](http://getseojs.com/) or  [SEO4Ajax](http://www.seo4ajax.com/) to start. Wordpress fanboys will often run in screaming at the top of their lungs “Updated Content! Updated Content!”. Don’t be fooled, they haven’t cornered the market. Updated content can be added really easily on static websites: write your content, push it to your gitrepository, and boom: your content is updated. It’s the power of continuous integration. Now all you have to do is actually create the content. Beyond that, quality SEO is really all about structure, structure that isplatform agnostic. The head matter on your posts (that’s what willbe updated most often, right?) determines your metadata and URL structure. Build processes can specify Pretty URLs. Writing in an HTML friendly language like Markdown makes it easy to add links, images and alt text. Sites like   [GoogleKeyword Planner](https://adwords.google.com/KeywordPlanner) and [KeywordTool](https://www.netlify.com/blog/2016/05/24/www.keywordtool.io) can guide your keyword usage. Best practices for SEO are about the work and planning that you do, not a plugin.

What is the missing link - a simple browser based User Interface to update the content of a website. At WebriQ we have solved this by automating content updates through a Github workflow that automatically creates a new build for your website each time the Github repository is changed. It allows you to dynamically change the content from a website on a desktop, tablet and even on a smartphone in case of urgency. 
You can view a [DEMO](http://demo.webriq.com) and you can manage the site on [ADMIN](http://demo.webriq.com/admin) - login with user demo@webriq.com and password demo!@#1234. Enjoy the ride.]]></description><link>https://www.webriq.com/posts/issues-with-static-website-generators</link><guid isPermaLink="true">https://www.webriq.com/posts/issues-with-static-website-generators</guid><category><![CDATA[posts]]></category><pubDate>Mon, 02 May 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/issues-with-static-website-generators.jpg" length="0" type="image/jpeg"/></item><item><title><![CDATA[Building Static Websites]]></title><description><![CDATA[<img src='https://www.webriq.com/img/uploads/building-static-websites.jpg' class='img-responsive'>

It’s 3am. Your website has just gone viral. Thousands of visitors are pouring in to learn about your company, and possibly become customers. Before long though, most of your visitors are greeted with one of these:

**INTERNAL SERVER ERROR 500**

**BAD GATEWAY – 502 ERROR**

Your server is down, and so is your website.

But there’s another way. A way to have a website that never goes down. A website that quietly maintains itself, is safe and secure, and remains unchanged as it goes from 100 visitors a month to 100 visitors a minute.

The idea of a single server serving traffic for a website harks back toan age of mainframes and ISDN lines. But the demands of scale and perfect uptime killed the mainframe. Maybe it’s time they killed single-server sites as well.

A server is a complicated piece of equipment. It needs to be updated. Any of the two hundred processes running on it has the power to cripple the machine. It will stubbornly refuse to serve more requests than it can handle. It will shutdown in the middle of the night, or the middle of your vacation.

Your homepage and marketing pages shouldn’t need to connect to a database. If your marketing site is opening a database connection just to render, you have a very finite limit on how many requests you can serve.

**Think of the browser as your new server.** You get a brand new shiny one dedicated to every user who visits your site. It can make requests. It can make decisions. It can show what you want when you want. But unlike an actual server, it can interact with the user instantly, show helpful feedback, and look great. It can do more than simply display what your web server spits out.

So lose your web server. Host your site by uploading some HTML and JavaScript to the cloud, and let it be served to your users from a content delivery network with servers around the world. Upload yourfiles manually, use a static site host like [WebriQ](http://www.app.webriq.com/auth/register), or an [open-sourcetool](https://github.com/EagerIO/Stout).

Nothing can compare to the simplicity of knowing your site can handle all the traffic in the world and still remain fast and reliable. That it can’t go down, because there’s nothing you’re responsible for which can stop working. It’s fundamentally so much simpler, and simpler things are better.

Better meaning easier to build. Easier to debug. Easier to change and improve. Easier to keep running in the face of whatever life is going to throw at your business. Oh, and it’s faster for your users, it can not be hacked, and never has to be updated, unless it needs change.

### **Try it out on [DEMO](http://demo.webriq.com/) and [ADMIN](http://demo.webriq.com/admin) your site with user name [demo@webriq.com](mailto:demo@webriq.com) and password demo!@#1234**


Static websites are the future. 
If you want some neat APPS that can enhance your Static website, check out [EAGER](http://eager.io)

        ]]></description><link>https://www.webriq.com/posts/building-static-websites</link><guid isPermaLink="true">https://www.webriq.com/posts/building-static-websites</guid><category><![CDATA[posts]]></category><pubDate>Sat, 23 Apr 2016 16:00:00 GMT</pubDate><enclosure url="https://www.webriq.com/img/uploads/building-static-websites.jpg" length="0" type="image/jpeg"/></item></channel></rss>